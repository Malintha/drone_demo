#!/usr/bin/env python3

import argparse
try:
    from cStringIO import StringIO
except ImportError:
    from io import StringIO
import math
import os
import re
import sys
import tempfile

# from em import Interpreter
from gazebo_msgs.srv import DeleteModel
from gazebo_msgs.srv import DeleteModelRequest
from gazebo_msgs.srv import SpawnModel
from gazebo_msgs.srv import SpawnModelRequest
from rosgraph import ROS_MASTER_URI
from rospy import ServiceProxy
from rospy import myargv as rospy_myargv
from rospy import wait_for_service

def spawn_model(model_name, model_xml,
    pose, ros_master_uri=None, robot_namespace=None, debug=True,
    service_name='/gazebo/spawn_sdf_model',
):
    x, y, yaw = pose
    INITIAL_HEIGHT = 0.5 # m

    if ros_master_uri:
        original_uri = os.environ[ROS_MASTER_URI]
        os.environ[ROS_MASTER_URI] = ros_master_uri
    wait_for_service(service_name)
    srv = ServiceProxy(service_name, SpawnModel)

    if debug:
        print(model_xml)

    req = SpawnModelRequest()
    req.model_name = model_name
    req.model_xml = model_xml
    req.robot_namespace = robot_namespace if robot_namespace else model_name
    req.initial_pose.position.x = x
    req.initial_pose.position.y = y
    req.initial_pose.position.z = INITIAL_HEIGHT
    req.initial_pose.orientation.x = 0.0
    req.initial_pose.orientation.y = 0.0
    req.initial_pose.orientation.z = math.sin(yaw / 2.0)
    req.initial_pose.orientation.w = math.cos(yaw / 2.0)
    req.reference_frame = ''

    resp = srv(req)

    if ros_master_uri:
        os.environ[ROS_MASTER_URI] = original_uri

    if resp.success:
        print(resp.status_message, '(%s)' % model_name)
        return 0
    else:
        print(resp.status_message, file=sys.stderr)
        return 1

def spawn_typhooon():
    with open('/home/osrf/diux/src/sitl_gazebo/models/typhoon_h480/typhoon_h480.sdf') as fh:
        model_xml = fh.read()
    spawn_model('typhoon_h480', model_xml, (0,0,0))

def spawn_iris():
    with open('/home/osrf/diux/src/sitl_gazebo/models/iris_fpv_cam/iris_fpv_cam.sdf') as fh:
        model_xml = fh.read()
    spawn_model('iris', model_xml, (0,0,0))

def spawn_plane():
    with open('/home/osrf/diux/src/sitl_gazebo/models/plane_cam/plane_cam.sdf') as fh:
        model_xml = fh.read()
    spawn_model('plane', model_xml, (0,0,0))

def main():
    SUPPORTED_DRONE_TYPES=['typhoon_h480', 'iris', 'plane']

    parser = argparse.ArgumentParser(description='Spawn a drone')
    parser.add_argument('drone_type', help="What type of drone", choices=SUPPORTED_DRONE_TYPES)

    myargv = rospy_myargv(argv=sys.argv)[1:]
    print("myargv", myargv)
    args = parser.parse_args(args=myargv)
    if args.drone_type == 'typhoon_h480':
        spawn_typhooon()
    elif args.drone_type == 'iris':
        spawn_iris()
    elif args.drone_type == 'plane':
        spawn_plane()

if __name__ == '__main__':
    main()